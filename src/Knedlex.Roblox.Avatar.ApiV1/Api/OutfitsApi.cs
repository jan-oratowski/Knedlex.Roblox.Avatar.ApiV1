/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Avatar.ApiV1.Client;
using Knedlex.Roblox.Avatar.ApiV1.Model;

namespace Knedlex.Roblox.Avatar.ApiV1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutfitsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new outfit.
        /// </summary>
        /// <remarks>
        /// Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsCreatePost(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);

        /// <summary>
        /// Creates a new outfit.
        /// </summary>
        /// <remarks>
        /// Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsCreatePostWithHttpInfo(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);
        /// <summary>
        /// Deletes the outfit
        /// </summary>
        /// <remarks>
        /// You are only allowed to delete outfits you created.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsUserOutfitIdDeletePost(long userOutfitId, int operationIndex = 0);

        /// <summary>
        /// Deletes the outfit
        /// </summary>
        /// <remarks>
        /// You are only allowed to delete outfits you created.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdDeletePostWithHttpInfo(long userOutfitId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsOutfitDetailsModel</returns>
        RobloxApiAvatarModelsOutfitDetailsModel V1OutfitsUserOutfitIdDetailsGet(long userOutfitId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsOutfitDetailsModel</returns>
        ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel> V1OutfitsUserOutfitIdDetailsGetWithHttpInfo(long userOutfitId, int operationIndex = 0);
        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        RobloxApiAvatarModelsOutfitModel V1OutfitsUserOutfitIdPatch(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        ApiResponse<RobloxApiAvatarModelsOutfitModel> V1OutfitsUserOutfitIdPatchWithHttpInfo(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);
        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsUserOutfitIdUpdatePost(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdUpdatePostWithHttpInfo(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0);
        /// <summary>
        /// Wears the outfit
        /// </summary>
        /// <remarks>
        /// Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsWearResponseModel</returns>
        RobloxApiAvatarModelsWearResponseModel V1OutfitsUserOutfitIdWearPost(long userOutfitId, int operationIndex = 0);

        /// <summary>
        /// Wears the outfit
        /// </summary>
        /// <remarks>
        /// Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsWearResponseModel</returns>
        ApiResponse<RobloxApiAvatarModelsWearResponseModel> V1OutfitsUserOutfitIdWearPostWithHttpInfo(long userOutfitId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutfitsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new outfit.
        /// </summary>
        /// <remarks>
        /// Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsCreatePostAsync(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new outfit.
        /// </summary>
        /// <remarks>
        /// Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsCreatePostWithHttpInfoAsync(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes the outfit
        /// </summary>
        /// <remarks>
        /// You are only allowed to delete outfits you created.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdDeletePostAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes the outfit
        /// </summary>
        /// <remarks>
        /// You are only allowed to delete outfits you created.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsUserOutfitIdDeletePostWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsOutfitDetailsModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsOutfitDetailsModel> V1OutfitsUserOutfitIdDetailsGetAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsOutfitDetailsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel>> V1OutfitsUserOutfitIdDetailsGetWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        System.Threading.Tasks.Task<RobloxApiAvatarModelsOutfitModel> V1OutfitsUserOutfitIdPatchAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsOutfitModel)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsOutfitModel>> V1OutfitsUserOutfitIdPatchWithHttpInfoAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdUpdatePostAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API
        /// </summary>
        /// <remarks>
        /// Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsUserOutfitIdUpdatePostWithHttpInfoAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wears the outfit
        /// </summary>
        /// <remarks>
        /// Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsWearResponseModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsWearResponseModel> V1OutfitsUserOutfitIdWearPostAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wears the outfit
        /// </summary>
        /// <remarks>
        /// Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsWearResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsWearResponseModel>> V1OutfitsUserOutfitIdWearPostWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOutfitsApi : IOutfitsApiSync, IOutfitsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OutfitsApi : IOutfitsApi
    {
        private Knedlex.Roblox.Avatar.ApiV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OutfitsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutfitsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutfitsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutfitsApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Avatar.ApiV1.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Avatar.ApiV1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutfitsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OutfitsApi(Knedlex.Roblox.Avatar.ApiV1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Avatar.ApiV1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutfitsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OutfitsApi(Knedlex.Roblox.Avatar.ApiV1.Client.ISynchronousClient client, Knedlex.Roblox.Avatar.ApiV1.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Avatar.ApiV1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Avatar.ApiV1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new outfit. Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsCreatePost(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1OutfitsCreatePostWithHttpInfo(outfitUpdateModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new outfit. Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsCreatePostWithHttpInfo(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsCreatePost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsCreatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsCreatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new outfit. Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsCreatePostAsync(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1OutfitsCreatePostWithHttpInfoAsync(outfitUpdateModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new outfit. Fails if any of the assetIds are not owned by the user, or not wearable types.  The name property of the request is optional as one will be auto-generated when the request has a null name.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outfitUpdateModel">The new outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsCreatePostWithHttpInfoAsync(RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsCreatePost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsCreatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsCreatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the outfit You are only allowed to delete outfits you created.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsUserOutfitIdDeletePost(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1OutfitsUserOutfitIdDeletePostWithHttpInfo(userOutfitId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the outfit You are only allowed to delete outfits you created.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdDeletePostWithHttpInfo(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/{userOutfitId}/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the outfit You are only allowed to delete outfits you created.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdDeletePostAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1OutfitsUserOutfitIdDeletePostWithHttpInfoAsync(userOutfitId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the outfit You are only allowed to delete outfits you created.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsUserOutfitIdDeletePostWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/{userOutfitId}/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsOutfitDetailsModel</returns>
        public RobloxApiAvatarModelsOutfitDetailsModel V1OutfitsUserOutfitIdDetailsGet(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel> localVarResponse = V1OutfitsUserOutfitIdDetailsGetWithHttpInfo(userOutfitId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsOutfitDetailsModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel> V1OutfitsUserOutfitIdDetailsGetWithHttpInfo(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsOutfitDetailsModel>("/v1/outfits/{userOutfitId}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsOutfitDetailsModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsOutfitDetailsModel> V1OutfitsUserOutfitIdDetailsGetAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel> localVarResponse = await V1OutfitsUserOutfitIdDetailsGetWithHttpInfoAsync(userOutfitId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsOutfitDetailsModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitDetailsModel>> V1OutfitsUserOutfitIdDetailsGetWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsOutfitDetailsModel>("/v1/outfits/{userOutfitId}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        public RobloxApiAvatarModelsOutfitModel V1OutfitsUserOutfitIdPatch(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitModel> localVarResponse = V1OutfitsUserOutfitIdPatchWithHttpInfo(userOutfitId, outfitUpdateModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitModel> V1OutfitsUserOutfitIdPatchWithHttpInfo(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsUserOutfitIdPatch");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter
            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RobloxApiAvatarModelsOutfitModel>("/v1/outfits/{userOutfitId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsOutfitModel</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsOutfitModel> V1OutfitsUserOutfitIdPatchAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitModel> localVarResponse = await V1OutfitsUserOutfitIdPatchWithHttpInfoAsync(userOutfitId, outfitUpdateModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contents of an outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types. Accepts partial updates.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsOutfitModel)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsOutfitModel>> V1OutfitsUserOutfitIdPatchWithHttpInfoAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsUserOutfitIdPatch");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter
            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RobloxApiAvatarModelsOutfitModel>("/v1/outfits/{userOutfitId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1OutfitsUserOutfitIdUpdatePost(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1OutfitsUserOutfitIdUpdatePostWithHttpInfo(userOutfitId, outfitUpdateModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdUpdatePostWithHttpInfo(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0)
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsUserOutfitIdUpdatePost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter
            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/{userOutfitId}/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1OutfitsUserOutfitIdUpdatePostAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1OutfitsUserOutfitIdUpdatePostWithHttpInfoAsync(userOutfitId, outfitUpdateModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contents of the outfit. Deprecated. There are no calls to this API Fails if the user does not own any of the assetIds or if they are not wearable asset types.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id.</param>
        /// <param name="outfitUpdateModel">The updated outfit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1OutfitsUserOutfitIdUpdatePostWithHttpInfoAsync(long userOutfitId, RobloxApiAvatarModelsOutfitUpdateModelV1 outfitUpdateModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outfitUpdateModel' is set
            if (outfitUpdateModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'outfitUpdateModel' when calling OutfitsApi->V1OutfitsUserOutfitIdUpdatePost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter
            localVarRequestOptions.Data = outfitUpdateModel;

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/outfits/{userOutfitId}/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wears the outfit Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsWearResponseModel</returns>
        public RobloxApiAvatarModelsWearResponseModel V1OutfitsUserOutfitIdWearPost(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> localVarResponse = V1OutfitsUserOutfitIdWearPostWithHttpInfo(userOutfitId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wears the outfit Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsWearResponseModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> V1OutfitsUserOutfitIdWearPostWithHttpInfo(long userOutfitId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdWearPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsWearResponseModel>("/v1/outfits/{userOutfitId}/wear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdWearPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wears the outfit Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsWearResponseModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsWearResponseModel> V1OutfitsUserOutfitIdWearPostAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> localVarResponse = await V1OutfitsUserOutfitIdWearPostWithHttpInfoAsync(userOutfitId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wears the outfit Applies the outfit&#39;s appearance to your avatar  If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOutfitId">The user outfit id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsWearResponseModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel>> V1OutfitsUserOutfitIdWearPostWithHttpInfoAsync(long userOutfitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userOutfitId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userOutfitId)); // path parameter

            localVarRequestOptions.Operation = "OutfitsApi.V1OutfitsUserOutfitIdWearPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsWearResponseModel>("/v1/outfits/{userOutfitId}/wear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OutfitsUserOutfitIdWearPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
