/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Avatar.ApiV1.Client;
using Knedlex.Roblox.Avatar.ApiV1.Model;

namespace Knedlex.Roblox.Avatar.ApiV1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvatarApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarAssetsAssetIdRemovePost(long assetId, int operationIndex = 0);

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdRemovePostWithHttpInfo(long assetId, int operationIndex = 0);
        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarAssetsAssetIdWearPost(long assetId, int operationIndex = 0);

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdWearPostWithHttpInfo(long assetId, int operationIndex = 0);
        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarModelV2</returns>
        RobloxApiAvatarModelsAvatarModelV2 V1AvatarGet(int operationIndex = 0);

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarModelV2</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarModelV2> V1AvatarGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns metadata used by the avatar page of the website
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarMetadataModel</returns>
        RobloxApiAvatarModelsAvatarMetadataModel V1AvatarMetadataGet(int operationIndex = 0);

        /// <summary>
        /// Returns metadata used by the avatar page of the website
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarMetadataModel</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel> V1AvatarMetadataGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1AvatarRedrawThumbnailPost(int operationIndex = 0);

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1AvatarRedrawThumbnailPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns the business rules related to avatars
        /// </summary>
        /// <remarks>
        /// BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarRulesModel</returns>
        RobloxApiAvatarModelsAvatarRulesModel V1AvatarRulesGet(int operationIndex = 0);

        /// <summary>
        /// Returns the business rules related to avatars
        /// </summary>
        /// <remarks>
        /// BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarRulesModel</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarRulesModel> V1AvatarRulesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Sets the authenticated user&#39;s body colors
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetBodyColorsPost(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0);

        /// <summary>
        /// Sets the authenticated user&#39;s body colors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetBodyColorsPostWithHttpInfo(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0);
        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15).
        /// </summary>
        /// <remarks>
        /// This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetPlayerAvatarTypePost(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0);

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15).
        /// </summary>
        /// <remarks>
        /// This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetPlayerAvatarTypePostWithHttpInfo(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0);
        /// <summary>
        /// Sets the authenticated user&#39;s scales
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetScalesPost(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0);

        /// <summary>
        /// Sets the authenticated user&#39;s scales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetScalesPostWithHttpInfo(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0);
        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsWearResponseModel</returns>
        RobloxApiAvatarModelsWearResponseModel V1AvatarSetWearingAssetsPost(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0);

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsWearResponseModel</returns>
        ApiResponse<RobloxApiAvatarModelsWearResponseModel> V1AvatarSetWearingAssetsPostWithHttpInfo(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0);
        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsGameStartInfoResponse</returns>
        RobloxApiAvatarModelsGameStartInfoResponse V1GameStartInfoGet(long universeId, int operationIndex = 0);

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsGameStartInfoResponse</returns>
        ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse> V1GameStartInfoGetWithHttpInfo(long universeId, int operationIndex = 0);
        /// <summary>
        /// Returns details about a specified user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// Includes assets, bodycolors, and playerAvatarType.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarModelV2</returns>
        RobloxApiAvatarModelsAvatarModelV2 V1UsersUserIdAvatarGet(long userId, int operationIndex = 0);

        /// <summary>
        /// Returns details about a specified user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// Includes assets, bodycolors, and playerAvatarType.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarModelV2</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarModelV2> V1UsersUserIdAvatarGetWithHttpInfo(long userId, int operationIndex = 0);
        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAssetIdListModel</returns>
        RobloxApiAvatarModelsAssetIdListModel V1UsersUserIdCurrentlyWearingGet(long userId, int operationIndex = 0);

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAssetIdListModel</returns>
        ApiResponse<RobloxApiAvatarModelsAssetIdListModel> V1UsersUserIdCurrentlyWearingGetWithHttpInfo(long userId, int operationIndex = 0);
        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel V1UsersUserIdOutfitsGet(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> V1UsersUserIdOutfitsGetWithHttpInfo(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvatarApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdRemovePostAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarAssetsAssetIdRemovePostWithHttpInfoAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdWearPostAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarAssetsAssetIdWearPostWithHttpInfoAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarModelV2</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarModelV2> V1AvatarGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarModelV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarModelV2>> V1AvatarGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns metadata used by the avatar page of the website
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarMetadataModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarMetadataModel> V1AvatarMetadataGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns metadata used by the avatar page of the website
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarMetadataModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel>> V1AvatarMetadataGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1AvatarRedrawThumbnailPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1AvatarRedrawThumbnailPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the business rules related to avatars
        /// </summary>
        /// <remarks>
        /// BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarRulesModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarRulesModel> V1AvatarRulesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the business rules related to avatars
        /// </summary>
        /// <remarks>
        /// BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarRulesModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarRulesModel>> V1AvatarRulesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the authenticated user&#39;s body colors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetBodyColorsPostAsync(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the authenticated user&#39;s body colors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetBodyColorsPostWithHttpInfoAsync(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15).
        /// </summary>
        /// <remarks>
        /// This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetPlayerAvatarTypePostAsync(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15).
        /// </summary>
        /// <remarks>
        /// This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetPlayerAvatarTypePostWithHttpInfoAsync(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the authenticated user&#39;s scales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetScalesPostAsync(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the authenticated user&#39;s scales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetScalesPostWithHttpInfoAsync(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsWearResponseModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsWearResponseModel> V1AvatarSetWearingAssetsPostAsync(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params
        /// </summary>
        /// <remarks>
        /// Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsWearResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsWearResponseModel>> V1AvatarSetWearingAssetsPostWithHttpInfoAsync(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsGameStartInfoResponse</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsGameStartInfoResponse> V1GameStartInfoGetAsync(long universeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsGameStartInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse>> V1GameStartInfoGetWithHttpInfoAsync(long universeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details about a specified user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// Includes assets, bodycolors, and playerAvatarType.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarModelV2</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarModelV2> V1UsersUserIdAvatarGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details about a specified user&#39;s avatar
        /// </summary>
        /// <remarks>
        /// Includes assets, bodycolors, and playerAvatarType.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarModelV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarModelV2>> V1UsersUserIdAvatarGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAssetIdListModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAssetIdListModel> V1UsersUserIdCurrentlyWearingGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAssetIdListModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAssetIdListModel>> V1UsersUserIdCurrentlyWearingGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> V1UsersUserIdOutfitsGetAsync(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel>> V1UsersUserIdOutfitsGetWithHttpInfoAsync(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvatarApi : IAvatarApiSync, IAvatarApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AvatarApi : IAvatarApi
    {
        private Knedlex.Roblox.Avatar.ApiV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvatarApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvatarApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Avatar.ApiV1.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Avatar.ApiV1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AvatarApi(Knedlex.Roblox.Avatar.ApiV1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Avatar.ApiV1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Avatar.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvatarApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AvatarApi(Knedlex.Roblox.Avatar.ApiV1.Client.ISynchronousClient client, Knedlex.Roblox.Avatar.ApiV1.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Avatar.ApiV1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Avatar.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Avatar.ApiV1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarAssetsAssetIdRemovePost(long assetId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1AvatarAssetsAssetIdRemovePostWithHttpInfo(assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdRemovePostWithHttpInfo(long assetId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarAssetsAssetIdRemovePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/assets/{assetId}/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarAssetsAssetIdRemovePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdRemovePostAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1AvatarAssetsAssetIdRemovePostWithHttpInfoAsync(assetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the asset from the authenticated user&#39;s avatar. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarAssetsAssetIdRemovePostWithHttpInfoAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarAssetsAssetIdRemovePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/assets/{assetId}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarAssetsAssetIdRemovePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarAssetsAssetIdWearPost(long assetId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1AvatarAssetsAssetIdWearPostWithHttpInfo(assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdWearPostWithHttpInfo(long assetId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarAssetsAssetIdWearPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/assets/{assetId}/wear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarAssetsAssetIdWearPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarAssetsAssetIdWearPostAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1AvatarAssetsAssetIdWearPostWithHttpInfoAsync(assetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Puts the asset on the authenticated user&#39;s avatar.  - Flagged as obsolete, does not support layered clothing meta params 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarAssetsAssetIdWearPostWithHttpInfoAsync(long assetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("assetId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarAssetsAssetIdWearPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/assets/{assetId}/wear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarAssetsAssetIdWearPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarModelV2</returns>
        public RobloxApiAvatarModelsAvatarModelV2 V1AvatarGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> localVarResponse = V1AvatarGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarModelV2</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> V1AvatarGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAvatarModelV2>("/v1/avatar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarModelV2</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarModelV2> V1AvatarGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> localVarResponse = await V1AvatarGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about the authenticated user&#39;s avatar 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarModelV2)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2>> V1AvatarGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAvatarModelV2>("/v1/avatar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns metadata used by the avatar page of the website 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarMetadataModel</returns>
        public RobloxApiAvatarModelsAvatarMetadataModel V1AvatarMetadataGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel> localVarResponse = V1AvatarMetadataGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns metadata used by the avatar page of the website 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarMetadataModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel> V1AvatarMetadataGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarMetadataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAvatarMetadataModel>("/v1/avatar/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarMetadataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns metadata used by the avatar page of the website 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarMetadataModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarMetadataModel> V1AvatarMetadataGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel> localVarResponse = await V1AvatarMetadataGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns metadata used by the avatar page of the website 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarMetadataModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarMetadataModel>> V1AvatarMetadataGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarMetadataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAvatarMetadataModel>("/v1/avatar/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarMetadataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1AvatarRedrawThumbnailPost(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<Object> localVarResponse = V1AvatarRedrawThumbnailPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<Object> V1AvatarRedrawThumbnailPostWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarRedrawThumbnailPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/avatar/redraw-thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarRedrawThumbnailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1AvatarRedrawThumbnailPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1AvatarRedrawThumbnailPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the authenticated user&#39;s thumbnail be redrawn 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<Object>> V1AvatarRedrawThumbnailPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarRedrawThumbnailPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/avatar/redraw-thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarRedrawThumbnailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the business rules related to avatars BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarRulesModel</returns>
        public RobloxApiAvatarModelsAvatarRulesModel V1AvatarRulesGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarRulesModel> localVarResponse = V1AvatarRulesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the business rules related to avatars BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarRulesModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarRulesModel> V1AvatarRulesGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarRulesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAvatarRulesModel>("/v1/avatar-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarRulesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the business rules related to avatars BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarRulesModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarRulesModel> V1AvatarRulesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarRulesModel> localVarResponse = await V1AvatarRulesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the business rules related to avatars BodyColorsPalette is a list of valid brickColors you can choose for your avatar.  WearableAssetTypes contains a list of asset types with names, ids, and the maximum number that you can wear at a time.  Does not include packages because they cannot be worn on your avatar directly.  PlayerAvatarTypes are the types of avatars you can choose between.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarRulesModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarRulesModel>> V1AvatarRulesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AvatarApi.V1AvatarRulesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAvatarRulesModel>("/v1/avatar-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarRulesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s body colors 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetBodyColorsPost(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1AvatarSetBodyColorsPostWithHttpInfo(bodyColorsModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s body colors 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetBodyColorsPostWithHttpInfo(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0)
        {
            // verify the required parameter 'bodyColorsModel' is set
            if (bodyColorsModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'bodyColorsModel' when calling AvatarApi->V1AvatarSetBodyColorsPost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyColorsModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetBodyColorsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-body-colors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetBodyColorsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s body colors 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetBodyColorsPostAsync(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1AvatarSetBodyColorsPostWithHttpInfoAsync(bodyColorsModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s body colors 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyColorsModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetBodyColorsPostWithHttpInfoAsync(RobloxApiAvatarModelsBodyColorsModel bodyColorsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyColorsModel' is set
            if (bodyColorsModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'bodyColorsModel' when calling AvatarApi->V1AvatarSetBodyColorsPost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyColorsModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetBodyColorsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-body-colors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetBodyColorsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15). This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetPlayerAvatarTypePost(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1AvatarSetPlayerAvatarTypePostWithHttpInfo(playerAvatarTypeModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15). This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetPlayerAvatarTypePostWithHttpInfo(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0)
        {
            // verify the required parameter 'playerAvatarTypeModel' is set
            if (playerAvatarTypeModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'playerAvatarTypeModel' when calling AvatarApi->V1AvatarSetPlayerAvatarTypePost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playerAvatarTypeModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetPlayerAvatarTypePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-player-avatar-type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetPlayerAvatarTypePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15). This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetPlayerAvatarTypePostAsync(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1AvatarSetPlayerAvatarTypePostWithHttpInfoAsync(playerAvatarTypeModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s player avatar type (e.g. R6 or R15). This is the avatar type chosen on the Avatar page. Some games can override this and force your character to be R6 or R15.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerAvatarTypeModel">R6 or R15</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetPlayerAvatarTypePostWithHttpInfoAsync(RobloxApiAvatarModelsPlayerAvatarTypeModel playerAvatarTypeModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerAvatarTypeModel' is set
            if (playerAvatarTypeModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'playerAvatarTypeModel' when calling AvatarApi->V1AvatarSetPlayerAvatarTypePost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playerAvatarTypeModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetPlayerAvatarTypePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-player-avatar-type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetPlayerAvatarTypePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s scales 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public RobloxApiAvatarModelsAvatarApiSuccessResponse V1AvatarSetScalesPost(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = V1AvatarSetScalesPostWithHttpInfo(scalesModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s scales 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetScalesPostWithHttpInfo(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0)
        {
            // verify the required parameter 'scalesModel' is set
            if (scalesModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'scalesModel' when calling AvatarApi->V1AvatarSetScalesPost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = scalesModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetScalesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-scales", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetScalesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s scales 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarApiSuccessResponse> V1AvatarSetScalesPostAsync(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse> localVarResponse = await V1AvatarSetScalesPostWithHttpInfoAsync(scalesModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the authenticated user&#39;s scales 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scalesModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarApiSuccessResponse>> V1AvatarSetScalesPostWithHttpInfoAsync(RobloxWebResponsesAvatarScaleModel scalesModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scalesModel' is set
            if (scalesModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'scalesModel' when calling AvatarApi->V1AvatarSetScalesPost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = scalesModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetScalesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsAvatarApiSuccessResponse>("/v1/avatar/set-scales", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetScalesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsWearResponseModel</returns>
        public RobloxApiAvatarModelsWearResponseModel V1AvatarSetWearingAssetsPost(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> localVarResponse = V1AvatarSetWearingAssetsPostWithHttpInfo(assetIdsModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsWearResponseModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> V1AvatarSetWearingAssetsPostWithHttpInfo(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0)
        {
            // verify the required parameter 'assetIdsModel' is set
            if (assetIdsModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'assetIdsModel' when calling AvatarApi->V1AvatarSetWearingAssetsPost");
            }

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetIdsModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetWearingAssetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxApiAvatarModelsWearResponseModel>("/v1/avatar/set-wearing-assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetWearingAssetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsWearResponseModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsWearResponseModel> V1AvatarSetWearingAssetsPostAsync(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel> localVarResponse = await V1AvatarSetWearingAssetsPostWithHttpInfoAsync(assetIdsModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the avatar&#39;s current assets to the list  - Flagged as obsolete, does not support layered clothing meta params Only allows items that you own, are not expired, and are wearable asset types.  Any assets being worn before this method is called are automatically removed.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdsModel">The list of asset IDs</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsWearResponseModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsWearResponseModel>> V1AvatarSetWearingAssetsPostWithHttpInfoAsync(RobloxApiAvatarModelsAssetIdListModel assetIdsModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetIdsModel' is set
            if (assetIdsModel == null)
            {
                throw new Knedlex.Roblox.Avatar.ApiV1.Client.ApiException(400, "Missing required parameter 'assetIdsModel' when calling AvatarApi->V1AvatarSetWearingAssetsPost");
            }


            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetIdsModel;

            localVarRequestOptions.Operation = "AvatarApi.V1AvatarSetWearingAssetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxApiAvatarModelsWearResponseModel>("/v1/avatar/set-wearing-assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AvatarSetWearingAssetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsGameStartInfoResponse</returns>
        public RobloxApiAvatarModelsGameStartInfoResponse V1GameStartInfoGet(long universeId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse> localVarResponse = V1GameStartInfoGetWithHttpInfo(universeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsGameStartInfoResponse</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse> V1GameStartInfoGetWithHttpInfo(long universeId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "universeId", universeId));

            localVarRequestOptions.Operation = "AvatarApi.V1GameStartInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsGameStartInfoResponse>("/v1/game-start-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GameStartInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsGameStartInfoResponse</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsGameStartInfoResponse> V1GameStartInfoGetAsync(long universeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse> localVarResponse = await V1GameStartInfoGetWithHttpInfoAsync(universeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The server will call this on game server start to request general information about the universe  This is version 1.1, which returns an entry from the UniverseAvatarType enum.  During mixed mode this may return unreliable results. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="universeId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsGameStartInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsGameStartInfoResponse>> V1GameStartInfoGetWithHttpInfoAsync(long universeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "universeId", universeId));

            localVarRequestOptions.Operation = "AvatarApi.V1GameStartInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsGameStartInfoResponse>("/v1/game-start-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GameStartInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a specified user&#39;s avatar Includes assets, bodycolors, and playerAvatarType.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarModelV2</returns>
        public RobloxApiAvatarModelsAvatarModelV2 V1UsersUserIdAvatarGet(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> localVarResponse = V1UsersUserIdAvatarGetWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a specified user&#39;s avatar Includes assets, bodycolors, and playerAvatarType.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarModelV2</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> V1UsersUserIdAvatarGetWithHttpInfo(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdAvatarGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAvatarModelV2>("/v1/users/{userId}/avatar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdAvatarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a specified user&#39;s avatar Includes assets, bodycolors, and playerAvatarType.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarModelV2</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarModelV2> V1UsersUserIdAvatarGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2> localVarResponse = await V1UsersUserIdAvatarGetWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a specified user&#39;s avatar Includes assets, bodycolors, and playerAvatarType.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarModelV2)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarModelV2>> V1UsersUserIdAvatarGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdAvatarGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAvatarModelV2>("/v1/users/{userId}/avatar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdAvatarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAssetIdListModel</returns>
        public RobloxApiAvatarModelsAssetIdListModel V1UsersUserIdCurrentlyWearingGet(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAssetIdListModel> localVarResponse = V1UsersUserIdCurrentlyWearingGetWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAssetIdListModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAssetIdListModel> V1UsersUserIdCurrentlyWearingGetWithHttpInfo(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdCurrentlyWearingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAssetIdListModel>("/v1/users/{userId}/currently-wearing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdCurrentlyWearingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAssetIdListModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAssetIdListModel> V1UsersUserIdCurrentlyWearingGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAssetIdListModel> localVarResponse = await V1UsersUserIdCurrentlyWearingGetWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of asset ids that the user is currently wearing 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAssetIdListModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAssetIdListModel>> V1UsersUserIdCurrentlyWearingGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdCurrentlyWearingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAssetIdListModel>("/v1/users/{userId}/currently-wearing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdCurrentlyWearingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        public RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel V1UsersUserIdOutfitsGet(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> localVarResponse = V1UsersUserIdOutfitsGetWithHttpInfo(userId, outfitType, page, itemsPerPage, isEditable);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        public Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> V1UsersUserIdOutfitsGetWithHttpInfo(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0)
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (outfitType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "outfitType", outfitType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (isEditable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "isEditable", isEditable));
            }

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdOutfitsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel>("/v1/users/{userId}/outfits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdOutfitsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel</returns>
        public async System.Threading.Tasks.Task<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> V1UsersUserIdOutfitsGetAsync(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel> localVarResponse = await V1UsersUserIdOutfitsGetWithHttpInfoAsync(userId, outfitType, page, itemsPerPage, isEditable, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deprecated, user v2.  Gets a list of outfits for the specified user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Avatar.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="outfitType">The outfit type being searched for, null will return all outfitTypes (optional)</param>
        /// <param name="page">The page number of the current page of requests, default is 1. (optional, default to 1)</param>
        /// <param name="itemsPerPage">The max number of outfits that can be returned. (optional, default to 25)</param>
        /// <param name="isEditable">Whether the outfits are editable. A null value will lead to no filtering. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Avatar.ApiV1.Client.ApiResponse<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel>> V1UsersUserIdOutfitsGetWithHttpInfoAsync(long userId, string outfitType = default(string), int? page = default(int?), int? itemsPerPage = default(int?), bool? isEditable = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Avatar.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (outfitType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "outfitType", outfitType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (isEditable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Avatar.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "isEditable", isEditable));
            }

            localVarRequestOptions.Operation = "AvatarApi.V1UsersUserIdOutfitsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxApiAvatarModelsAvatarFilteredPageResponseRobloxApiAvatarModelsOutfitModel>("/v1/users/{userId}/outfits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdOutfitsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
