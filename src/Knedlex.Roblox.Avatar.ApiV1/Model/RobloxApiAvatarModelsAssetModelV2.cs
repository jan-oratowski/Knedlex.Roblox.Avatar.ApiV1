/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// A model containing details about an asset  - V2: adds CurrentVersionId, AssetMetaModel
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.AssetModelV2")]
    public partial class RobloxApiAvatarModelsAssetModelV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsAssetModelV2" /> class.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="name">The name.</param>
        /// <param name="assetType">assetType.</param>
        /// <param name="currentVersionId">Id of the current version of asset.</param>
        /// <param name="meta">meta.</param>
        public RobloxApiAvatarModelsAssetModelV2(long id = default(long), string name = default(string), RobloxApiAvatarModelsAssetTypeModel assetType = default(RobloxApiAvatarModelsAssetTypeModel), long currentVersionId = default(long), RobloxApiAvatarModelsAssetMetaModelV1 meta = default(RobloxApiAvatarModelsAssetMetaModelV1))
        {
            this.Id = id;
            this.Name = name;
            this.AssetType = assetType;
            this.CurrentVersionId = currentVersionId;
            this.Meta = meta;
        }

        /// <summary>
        /// The id
        /// </summary>
        /// <value>The id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// The name
        /// </summary>
        /// <value>The name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name = "assetType", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsAssetTypeModel AssetType { get; set; }

        /// <summary>
        /// Id of the current version of asset
        /// </summary>
        /// <value>Id of the current version of asset</value>
        [DataMember(Name = "currentVersionId", EmitDefaultValue = false)]
        public long CurrentVersionId { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsAssetMetaModelV1 Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsAssetModelV2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  CurrentVersionId: ").Append(CurrentVersionId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
