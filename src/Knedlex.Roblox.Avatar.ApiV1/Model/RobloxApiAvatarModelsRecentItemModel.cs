/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// A model containing details about a recent item
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.RecentItemModel")]
    public partial class RobloxApiAvatarModelsRecentItemModel : IValidatableObject
    {
        /// <summary>
        /// The recent item&#39;s type. Can be Asset or Outfit [&#39;Asset&#39; &#x3D; 1, &#39;Outfit&#39; &#x3D; 2]
        /// </summary>
        /// <value>The recent item&#39;s type. Can be Asset or Outfit [&#39;Asset&#39; &#x3D; 1, &#39;Outfit&#39; &#x3D; 2]</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2
        }


        /// <summary>
        /// The recent item&#39;s type. Can be Asset or Outfit [&#39;Asset&#39; &#x3D; 1, &#39;Outfit&#39; &#x3D; 2]
        /// </summary>
        /// <value>The recent item&#39;s type. Can be Asset or Outfit [&#39;Asset&#39; &#x3D; 1, &#39;Outfit&#39; &#x3D; 2]</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsRecentItemModel" /> class.
        /// </summary>
        /// <param name="id">The id. Check the type to figure out what kind of recent item this is..</param>
        /// <param name="name">The name.</param>
        /// <param name="type">The recent item&#39;s type. Can be Asset or Outfit [&#39;Asset&#39; &#x3D; 1, &#39;Outfit&#39; &#x3D; 2].</param>
        /// <param name="assetType">assetType.</param>
        /// <param name="isEditable">The outfit&#39;s editability (only included if it is an outfit).</param>
        public RobloxApiAvatarModelsRecentItemModel(long id = default(long), string name = default(string), TypeEnum? type = default(TypeEnum?), RobloxApiAvatarModelsAssetTypeModel assetType = default(RobloxApiAvatarModelsAssetTypeModel), bool isEditable = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.AssetType = assetType;
            this.IsEditable = isEditable;
        }

        /// <summary>
        /// The id. Check the type to figure out what kind of recent item this is.
        /// </summary>
        /// <value>The id. Check the type to figure out what kind of recent item this is.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// The name
        /// </summary>
        /// <value>The name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name = "assetType", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsAssetTypeModel AssetType { get; set; }

        /// <summary>
        /// The outfit&#39;s editability (only included if it is an outfit)
        /// </summary>
        /// <value>The outfit&#39;s editability (only included if it is an outfit)</value>
        [DataMember(Name = "isEditable", EmitDefaultValue = true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsRecentItemModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
