/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// Response object representing a user&#39;s emote
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.EmoteResponseModel")]
    public partial class RobloxApiAvatarModelsEmoteResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsEmoteResponseModel" /> class.
        /// </summary>
        /// <param name="assetId">The asset id of the emote.</param>
        /// <param name="assetName">The name of the emote.</param>
        /// <param name="position">The position the emote is equipped to.</param>
        public RobloxApiAvatarModelsEmoteResponseModel(long assetId = default(long), string assetName = default(string), int position = default(int))
        {
            this.AssetId = assetId;
            this.AssetName = assetName;
            this.Position = position;
        }

        /// <summary>
        /// The asset id of the emote
        /// </summary>
        /// <value>The asset id of the emote</value>
        [DataMember(Name = "assetId", EmitDefaultValue = false)]
        public long AssetId { get; set; }

        /// <summary>
        /// The name of the emote
        /// </summary>
        /// <value>The name of the emote</value>
        [DataMember(Name = "assetName", EmitDefaultValue = false)]
        public string AssetName { get; set; }

        /// <summary>
        /// The position the emote is equipped to
        /// </summary>
        /// <value>The position the emote is equipped to</value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsEmoteResponseModel {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
