/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// A model for wear outfit responses
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.WearResponseModel")]
    public partial class RobloxApiAvatarModelsWearResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsWearResponseModel" /> class.
        /// </summary>
        /// <param name="invalidAssets">The assets that could not be worn  Unlike invalidAssetIds, only contains assets that are wearable types.</param>
        /// <param name="invalidAssetIds">The asset ids that could not be worn.</param>
        /// <param name="success">Whether or not all the outfit contents were successfully worn.</param>
        public RobloxApiAvatarModelsWearResponseModel(List<RobloxApiAvatarModelsAssetModelV2> invalidAssets = default(List<RobloxApiAvatarModelsAssetModelV2>), List<long> invalidAssetIds = default(List<long>), bool success = default(bool))
        {
            this.InvalidAssets = invalidAssets;
            this.InvalidAssetIds = invalidAssetIds;
            this.Success = success;
        }

        /// <summary>
        /// The assets that could not be worn  Unlike invalidAssetIds, only contains assets that are wearable types
        /// </summary>
        /// <value>The assets that could not be worn  Unlike invalidAssetIds, only contains assets that are wearable types</value>
        [DataMember(Name = "invalidAssets", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsAssetModelV2> InvalidAssets { get; set; }

        /// <summary>
        /// The asset ids that could not be worn
        /// </summary>
        /// <value>The asset ids that could not be worn</value>
        [DataMember(Name = "invalidAssetIds", EmitDefaultValue = false)]
        public List<long> InvalidAssetIds { get; set; }

        /// <summary>
        /// Whether or not all the outfit contents were successfully worn
        /// </summary>
        /// <value>Whether or not all the outfit contents were successfully worn</value>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsWearResponseModel {\n");
            sb.Append("  InvalidAssets: ").Append(InvalidAssets).Append("\n");
            sb.Append("  InvalidAssetIds: ").Append(InvalidAssetIds).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
