/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// A model containing details about avatar-related business rules
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.AvatarRulesModel")]
    public partial class RobloxApiAvatarModelsAvatarRulesModel : IValidatableObject
    {
        /// <summary>
        ///  [&#39;R6&#39; &#x3D; 1, &#39;R15&#39; &#x3D; 3]
        /// </summary>
        /// <value> [&#39;R6&#39; &#x3D; 1, &#39;R15&#39; &#x3D; 3]</value>
        public enum PlayerAvatarTypesEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3
        }

        /// <summary>
        ///  [&#39;Image&#39; &#x3D; 1, &#39;TShirt&#39; &#x3D; 2, &#39;Audio&#39; &#x3D; 3, &#39;Mesh&#39; &#x3D; 4, &#39;Lua&#39; &#x3D; 5, &#39;HTML&#39; &#x3D; 6, &#39;Text&#39; &#x3D; 7, &#39;Hat&#39; &#x3D; 8, &#39;Place&#39; &#x3D; 9, &#39;Model&#39; &#x3D; 10, &#39;Shirt&#39; &#x3D; 11, &#39;Pants&#39; &#x3D; 12, &#39;Decal&#39; &#x3D; 13, &#39;Avatar&#39; &#x3D; 16, &#39;Head&#39; &#x3D; 17, &#39;Face&#39; &#x3D; 18, &#39;Gear&#39; &#x3D; 19, &#39;Badge&#39; &#x3D; 21, &#39;GroupEmblem&#39; &#x3D; 22, &#39;Animation&#39; &#x3D; 24, &#39;Arms&#39; &#x3D; 25, &#39;Legs&#39; &#x3D; 26, &#39;Torso&#39; &#x3D; 27, &#39;RightArm&#39; &#x3D; 28, &#39;LeftArm&#39; &#x3D; 29, &#39;LeftLeg&#39; &#x3D; 30, &#39;RightLeg&#39; &#x3D; 31, &#39;Package&#39; &#x3D; 32, &#39;YouTubeVideo&#39; &#x3D; 33, &#39;GamePass&#39; &#x3D; 34, &#39;App&#39; &#x3D; 35, &#39;Code&#39; &#x3D; 37, &#39;Plugin&#39; &#x3D; 38, &#39;SolidModel&#39; &#x3D; 39, &#39;MeshPart&#39; &#x3D; 40, &#39;HairAccessory&#39; &#x3D; 41, &#39;FaceAccessory&#39; &#x3D; 42, &#39;NeckAccessory&#39; &#x3D; 43, &#39;ShoulderAccessory&#39; &#x3D; 44, &#39;FrontAccessory&#39; &#x3D; 45, &#39;BackAccessory&#39; &#x3D; 46, &#39;WaistAccessory&#39; &#x3D; 47, &#39;ClimbAnimation&#39; &#x3D; 48, &#39;DeathAnimation&#39; &#x3D; 49, &#39;FallAnimation&#39; &#x3D; 50, &#39;IdleAnimation&#39; &#x3D; 51, &#39;JumpAnimation&#39; &#x3D; 52, &#39;RunAnimation&#39; &#x3D; 53, &#39;SwimAnimation&#39; &#x3D; 54, &#39;WalkAnimation&#39; &#x3D; 55, &#39;PoseAnimation&#39; &#x3D; 56, &#39;LocalizationTableManifest&#39; &#x3D; 59, &#39;LocalizationTableTranslation&#39; &#x3D; 60, &#39;EmoteAnimation&#39; &#x3D; 61, &#39;Video&#39; &#x3D; 62, &#39;TexturePack&#39; &#x3D; 63, &#39;TShirtAccessory&#39; &#x3D; 64, &#39;ShirtAccessory&#39; &#x3D; 65, &#39;PantsAccessory&#39; &#x3D; 66, &#39;JacketAccessory&#39; &#x3D; 67, &#39;SweaterAccessory&#39; &#x3D; 68, &#39;ShortsAccessory&#39; &#x3D; 69, &#39;LeftShoeAccessory&#39; &#x3D; 70, &#39;RightShoeAccessory&#39; &#x3D; 71, &#39;DressSkirtAccessory&#39; &#x3D; 72, &#39;FontFamily&#39; &#x3D; 73, &#39;FontFace&#39; &#x3D; 74, &#39;MeshHiddenSurfaceRemoval&#39; &#x3D; 75, &#39;EyebrowAccessory&#39; &#x3D; 76, &#39;EyelashAccessory&#39; &#x3D; 77, &#39;MoodAnimation&#39; &#x3D; 78, &#39;DynamicHead&#39; &#x3D; 79, &#39;CodeSnippet&#39; &#x3D; 80]
        /// </summary>
        /// <value> [&#39;Image&#39; &#x3D; 1, &#39;TShirt&#39; &#x3D; 2, &#39;Audio&#39; &#x3D; 3, &#39;Mesh&#39; &#x3D; 4, &#39;Lua&#39; &#x3D; 5, &#39;HTML&#39; &#x3D; 6, &#39;Text&#39; &#x3D; 7, &#39;Hat&#39; &#x3D; 8, &#39;Place&#39; &#x3D; 9, &#39;Model&#39; &#x3D; 10, &#39;Shirt&#39; &#x3D; 11, &#39;Pants&#39; &#x3D; 12, &#39;Decal&#39; &#x3D; 13, &#39;Avatar&#39; &#x3D; 16, &#39;Head&#39; &#x3D; 17, &#39;Face&#39; &#x3D; 18, &#39;Gear&#39; &#x3D; 19, &#39;Badge&#39; &#x3D; 21, &#39;GroupEmblem&#39; &#x3D; 22, &#39;Animation&#39; &#x3D; 24, &#39;Arms&#39; &#x3D; 25, &#39;Legs&#39; &#x3D; 26, &#39;Torso&#39; &#x3D; 27, &#39;RightArm&#39; &#x3D; 28, &#39;LeftArm&#39; &#x3D; 29, &#39;LeftLeg&#39; &#x3D; 30, &#39;RightLeg&#39; &#x3D; 31, &#39;Package&#39; &#x3D; 32, &#39;YouTubeVideo&#39; &#x3D; 33, &#39;GamePass&#39; &#x3D; 34, &#39;App&#39; &#x3D; 35, &#39;Code&#39; &#x3D; 37, &#39;Plugin&#39; &#x3D; 38, &#39;SolidModel&#39; &#x3D; 39, &#39;MeshPart&#39; &#x3D; 40, &#39;HairAccessory&#39; &#x3D; 41, &#39;FaceAccessory&#39; &#x3D; 42, &#39;NeckAccessory&#39; &#x3D; 43, &#39;ShoulderAccessory&#39; &#x3D; 44, &#39;FrontAccessory&#39; &#x3D; 45, &#39;BackAccessory&#39; &#x3D; 46, &#39;WaistAccessory&#39; &#x3D; 47, &#39;ClimbAnimation&#39; &#x3D; 48, &#39;DeathAnimation&#39; &#x3D; 49, &#39;FallAnimation&#39; &#x3D; 50, &#39;IdleAnimation&#39; &#x3D; 51, &#39;JumpAnimation&#39; &#x3D; 52, &#39;RunAnimation&#39; &#x3D; 53, &#39;SwimAnimation&#39; &#x3D; 54, &#39;WalkAnimation&#39; &#x3D; 55, &#39;PoseAnimation&#39; &#x3D; 56, &#39;LocalizationTableManifest&#39; &#x3D; 59, &#39;LocalizationTableTranslation&#39; &#x3D; 60, &#39;EmoteAnimation&#39; &#x3D; 61, &#39;Video&#39; &#x3D; 62, &#39;TexturePack&#39; &#x3D; 63, &#39;TShirtAccessory&#39; &#x3D; 64, &#39;ShirtAccessory&#39; &#x3D; 65, &#39;PantsAccessory&#39; &#x3D; 66, &#39;JacketAccessory&#39; &#x3D; 67, &#39;SweaterAccessory&#39; &#x3D; 68, &#39;ShortsAccessory&#39; &#x3D; 69, &#39;LeftShoeAccessory&#39; &#x3D; 70, &#39;RightShoeAccessory&#39; &#x3D; 71, &#39;DressSkirtAccessory&#39; &#x3D; 72, &#39;FontFamily&#39; &#x3D; 73, &#39;FontFace&#39; &#x3D; 74, &#39;MeshHiddenSurfaceRemoval&#39; &#x3D; 75, &#39;EyebrowAccessory&#39; &#x3D; 76, &#39;EyelashAccessory&#39; &#x3D; 77, &#39;MoodAnimation&#39; &#x3D; 78, &#39;DynamicHead&#39; &#x3D; 79, &#39;CodeSnippet&#39; &#x3D; 80]</value>
        public enum AccessoryRefinementTypesEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6,

            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            NUMBER_7 = 7,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_9 for value: 9
            /// </summary>
            NUMBER_9 = 9,

            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            NUMBER_10 = 10,

            /// <summary>
            /// Enum NUMBER_11 for value: 11
            /// </summary>
            NUMBER_11 = 11,

            /// <summary>
            /// Enum NUMBER_12 for value: 12
            /// </summary>
            NUMBER_12 = 12,

            /// <summary>
            /// Enum NUMBER_13 for value: 13
            /// </summary>
            NUMBER_13 = 13,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_17 for value: 17
            /// </summary>
            NUMBER_17 = 17,

            /// <summary>
            /// Enum NUMBER_18 for value: 18
            /// </summary>
            NUMBER_18 = 18,

            /// <summary>
            /// Enum NUMBER_19 for value: 19
            /// </summary>
            NUMBER_19 = 19,

            /// <summary>
            /// Enum NUMBER_21 for value: 21
            /// </summary>
            NUMBER_21 = 21,

            /// <summary>
            /// Enum NUMBER_22 for value: 22
            /// </summary>
            NUMBER_22 = 22,

            /// <summary>
            /// Enum NUMBER_24 for value: 24
            /// </summary>
            NUMBER_24 = 24,

            /// <summary>
            /// Enum NUMBER_25 for value: 25
            /// </summary>
            NUMBER_25 = 25,

            /// <summary>
            /// Enum NUMBER_26 for value: 26
            /// </summary>
            NUMBER_26 = 26,

            /// <summary>
            /// Enum NUMBER_27 for value: 27
            /// </summary>
            NUMBER_27 = 27,

            /// <summary>
            /// Enum NUMBER_28 for value: 28
            /// </summary>
            NUMBER_28 = 28,

            /// <summary>
            /// Enum NUMBER_29 for value: 29
            /// </summary>
            NUMBER_29 = 29,

            /// <summary>
            /// Enum NUMBER_30 for value: 30
            /// </summary>
            NUMBER_30 = 30,

            /// <summary>
            /// Enum NUMBER_31 for value: 31
            /// </summary>
            NUMBER_31 = 31,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_33 for value: 33
            /// </summary>
            NUMBER_33 = 33,

            /// <summary>
            /// Enum NUMBER_34 for value: 34
            /// </summary>
            NUMBER_34 = 34,

            /// <summary>
            /// Enum NUMBER_35 for value: 35
            /// </summary>
            NUMBER_35 = 35,

            /// <summary>
            /// Enum NUMBER_37 for value: 37
            /// </summary>
            NUMBER_37 = 37,

            /// <summary>
            /// Enum NUMBER_38 for value: 38
            /// </summary>
            NUMBER_38 = 38,

            /// <summary>
            /// Enum NUMBER_39 for value: 39
            /// </summary>
            NUMBER_39 = 39,

            /// <summary>
            /// Enum NUMBER_40 for value: 40
            /// </summary>
            NUMBER_40 = 40,

            /// <summary>
            /// Enum NUMBER_41 for value: 41
            /// </summary>
            NUMBER_41 = 41,

            /// <summary>
            /// Enum NUMBER_42 for value: 42
            /// </summary>
            NUMBER_42 = 42,

            /// <summary>
            /// Enum NUMBER_43 for value: 43
            /// </summary>
            NUMBER_43 = 43,

            /// <summary>
            /// Enum NUMBER_44 for value: 44
            /// </summary>
            NUMBER_44 = 44,

            /// <summary>
            /// Enum NUMBER_45 for value: 45
            /// </summary>
            NUMBER_45 = 45,

            /// <summary>
            /// Enum NUMBER_46 for value: 46
            /// </summary>
            NUMBER_46 = 46,

            /// <summary>
            /// Enum NUMBER_47 for value: 47
            /// </summary>
            NUMBER_47 = 47,

            /// <summary>
            /// Enum NUMBER_48 for value: 48
            /// </summary>
            NUMBER_48 = 48,

            /// <summary>
            /// Enum NUMBER_49 for value: 49
            /// </summary>
            NUMBER_49 = 49,

            /// <summary>
            /// Enum NUMBER_50 for value: 50
            /// </summary>
            NUMBER_50 = 50,

            /// <summary>
            /// Enum NUMBER_51 for value: 51
            /// </summary>
            NUMBER_51 = 51,

            /// <summary>
            /// Enum NUMBER_52 for value: 52
            /// </summary>
            NUMBER_52 = 52,

            /// <summary>
            /// Enum NUMBER_53 for value: 53
            /// </summary>
            NUMBER_53 = 53,

            /// <summary>
            /// Enum NUMBER_54 for value: 54
            /// </summary>
            NUMBER_54 = 54,

            /// <summary>
            /// Enum NUMBER_55 for value: 55
            /// </summary>
            NUMBER_55 = 55,

            /// <summary>
            /// Enum NUMBER_56 for value: 56
            /// </summary>
            NUMBER_56 = 56,

            /// <summary>
            /// Enum NUMBER_59 for value: 59
            /// </summary>
            NUMBER_59 = 59,

            /// <summary>
            /// Enum NUMBER_60 for value: 60
            /// </summary>
            NUMBER_60 = 60,

            /// <summary>
            /// Enum NUMBER_61 for value: 61
            /// </summary>
            NUMBER_61 = 61,

            /// <summary>
            /// Enum NUMBER_62 for value: 62
            /// </summary>
            NUMBER_62 = 62,

            /// <summary>
            /// Enum NUMBER_63 for value: 63
            /// </summary>
            NUMBER_63 = 63,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_65 for value: 65
            /// </summary>
            NUMBER_65 = 65,

            /// <summary>
            /// Enum NUMBER_66 for value: 66
            /// </summary>
            NUMBER_66 = 66,

            /// <summary>
            /// Enum NUMBER_67 for value: 67
            /// </summary>
            NUMBER_67 = 67,

            /// <summary>
            /// Enum NUMBER_68 for value: 68
            /// </summary>
            NUMBER_68 = 68,

            /// <summary>
            /// Enum NUMBER_69 for value: 69
            /// </summary>
            NUMBER_69 = 69,

            /// <summary>
            /// Enum NUMBER_70 for value: 70
            /// </summary>
            NUMBER_70 = 70,

            /// <summary>
            /// Enum NUMBER_71 for value: 71
            /// </summary>
            NUMBER_71 = 71,

            /// <summary>
            /// Enum NUMBER_72 for value: 72
            /// </summary>
            NUMBER_72 = 72,

            /// <summary>
            /// Enum NUMBER_73 for value: 73
            /// </summary>
            NUMBER_73 = 73,

            /// <summary>
            /// Enum NUMBER_74 for value: 74
            /// </summary>
            NUMBER_74 = 74,

            /// <summary>
            /// Enum NUMBER_75 for value: 75
            /// </summary>
            NUMBER_75 = 75,

            /// <summary>
            /// Enum NUMBER_76 for value: 76
            /// </summary>
            NUMBER_76 = 76,

            /// <summary>
            /// Enum NUMBER_77 for value: 77
            /// </summary>
            NUMBER_77 = 77,

            /// <summary>
            /// Enum NUMBER_78 for value: 78
            /// </summary>
            NUMBER_78 = 78,

            /// <summary>
            /// Enum NUMBER_79 for value: 79
            /// </summary>
            NUMBER_79 = 79,

            /// <summary>
            /// Enum NUMBER_80 for value: 80
            /// </summary>
            NUMBER_80 = 80
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsAvatarRulesModel" /> class.
        /// </summary>
        /// <param name="playerAvatarTypes">The avatar type.</param>
        /// <param name="scales">The scales.</param>
        /// <param name="wearableAssetTypes">The assets worn on the character.</param>
        /// <param name="accessoryRefinementTypes">The list of asset types for Accessory Refinement..</param>
        /// <param name="accessoryRefinementLowerBounds">accessoryRefinementLowerBounds.</param>
        /// <param name="accessoryRefinementUpperBounds">accessoryRefinementUpperBounds.</param>
        /// <param name="bodyColorsPalette">The full set of usable body colors.</param>
        /// <param name="basicBodyColorsPalette">The basic set of body colors.</param>
        /// <param name="minimumDeltaEBodyColorDifference">The minimum Delta-E difference in body colors  for default clothing not to be applied.</param>
        /// <param name="proportionsAndBodyTypeEnabledForUser">Whether proportion and bodyType scales are allowed to be set by the authenticated user.</param>
        /// <param name="defaultClothingAssetLists">defaultClothingAssetLists.</param>
        /// <param name="bundlesEnabledForUser">Whether or not bundles are enabled for the specific user.</param>
        /// <param name="emotesEnabledForUser">Whether or not emotes are enabled.</param>
        public RobloxApiAvatarModelsAvatarRulesModel(List<PlayerAvatarTypesEnum> playerAvatarTypes = default(List<PlayerAvatarTypesEnum>), Dictionary<string, RobloxApiAvatarModelsScaleRulesModel> scales = default(Dictionary<string, RobloxApiAvatarModelsScaleRulesModel>), List<RobloxApiAvatarModelsAssetTypeRulesModel> wearableAssetTypes = default(List<RobloxApiAvatarModelsAssetTypeRulesModel>), List<AccessoryRefinementTypesEnum> accessoryRefinementTypes = default(List<AccessoryRefinementTypesEnum>), RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds accessoryRefinementLowerBounds = default(RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds), RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds accessoryRefinementUpperBounds = default(RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds), List<RobloxApiAvatarModelsBodyColorModel> bodyColorsPalette = default(List<RobloxApiAvatarModelsBodyColorModel>), List<RobloxApiAvatarModelsBodyColorModel> basicBodyColorsPalette = default(List<RobloxApiAvatarModelsBodyColorModel>), double minimumDeltaEBodyColorDifference = default(double), bool proportionsAndBodyTypeEnabledForUser = default(bool), RobloxApiAvatarModelsDefaultClothingAssets defaultClothingAssetLists = default(RobloxApiAvatarModelsDefaultClothingAssets), bool bundlesEnabledForUser = default(bool), bool emotesEnabledForUser = default(bool))
        {
            this.PlayerAvatarTypes = playerAvatarTypes;
            this.Scales = scales;
            this.WearableAssetTypes = wearableAssetTypes;
            this.AccessoryRefinementTypes = accessoryRefinementTypes;
            this.AccessoryRefinementLowerBounds = accessoryRefinementLowerBounds;
            this.AccessoryRefinementUpperBounds = accessoryRefinementUpperBounds;
            this.BodyColorsPalette = bodyColorsPalette;
            this.BasicBodyColorsPalette = basicBodyColorsPalette;
            this.MinimumDeltaEBodyColorDifference = minimumDeltaEBodyColorDifference;
            this.ProportionsAndBodyTypeEnabledForUser = proportionsAndBodyTypeEnabledForUser;
            this.DefaultClothingAssetLists = defaultClothingAssetLists;
            this.BundlesEnabledForUser = bundlesEnabledForUser;
            this.EmotesEnabledForUser = emotesEnabledForUser;
        }

        /// <summary>
        /// The avatar type
        /// </summary>
        /// <value>The avatar type</value>
        [DataMember(Name = "playerAvatarTypes", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsAvatarRulesModel.PlayerAvatarTypesEnum> PlayerAvatarTypes { get; set; }

        /// <summary>
        /// The scales
        /// </summary>
        /// <value>The scales</value>
        [DataMember(Name = "scales", EmitDefaultValue = false)]
        public Dictionary<string, RobloxApiAvatarModelsScaleRulesModel> Scales { get; set; }

        /// <summary>
        /// The assets worn on the character
        /// </summary>
        /// <value>The assets worn on the character</value>
        [DataMember(Name = "wearableAssetTypes", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsAssetTypeRulesModel> WearableAssetTypes { get; set; }

        /// <summary>
        /// The list of asset types for Accessory Refinement.
        /// </summary>
        /// <value>The list of asset types for Accessory Refinement.</value>
        [DataMember(Name = "accessoryRefinementTypes", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsAvatarRulesModel.AccessoryRefinementTypesEnum> AccessoryRefinementTypes { get; set; }

        /// <summary>
        /// Gets or Sets AccessoryRefinementLowerBounds
        /// </summary>
        [DataMember(Name = "accessoryRefinementLowerBounds", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds AccessoryRefinementLowerBounds { get; set; }

        /// <summary>
        /// Gets or Sets AccessoryRefinementUpperBounds
        /// </summary>
        [DataMember(Name = "accessoryRefinementUpperBounds", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsAvatarRulesModelAccessoryRefinementLowerBounds AccessoryRefinementUpperBounds { get; set; }

        /// <summary>
        /// The full set of usable body colors
        /// </summary>
        /// <value>The full set of usable body colors</value>
        [DataMember(Name = "bodyColorsPalette", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsBodyColorModel> BodyColorsPalette { get; set; }

        /// <summary>
        /// The basic set of body colors
        /// </summary>
        /// <value>The basic set of body colors</value>
        [DataMember(Name = "basicBodyColorsPalette", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsBodyColorModel> BasicBodyColorsPalette { get; set; }

        /// <summary>
        /// The minimum Delta-E difference in body colors  for default clothing not to be applied
        /// </summary>
        /// <value>The minimum Delta-E difference in body colors  for default clothing not to be applied</value>
        [DataMember(Name = "minimumDeltaEBodyColorDifference", EmitDefaultValue = false)]
        public double MinimumDeltaEBodyColorDifference { get; set; }

        /// <summary>
        /// Whether proportion and bodyType scales are allowed to be set by the authenticated user
        /// </summary>
        /// <value>Whether proportion and bodyType scales are allowed to be set by the authenticated user</value>
        [DataMember(Name = "proportionsAndBodyTypeEnabledForUser", EmitDefaultValue = true)]
        public bool ProportionsAndBodyTypeEnabledForUser { get; set; }

        /// <summary>
        /// Gets or Sets DefaultClothingAssetLists
        /// </summary>
        [DataMember(Name = "defaultClothingAssetLists", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsDefaultClothingAssets DefaultClothingAssetLists { get; set; }

        /// <summary>
        /// Whether or not bundles are enabled for the specific user
        /// </summary>
        /// <value>Whether or not bundles are enabled for the specific user</value>
        [DataMember(Name = "bundlesEnabledForUser", EmitDefaultValue = true)]
        public bool BundlesEnabledForUser { get; set; }

        /// <summary>
        /// Whether or not emotes are enabled
        /// </summary>
        /// <value>Whether or not emotes are enabled</value>
        [DataMember(Name = "emotesEnabledForUser", EmitDefaultValue = true)]
        public bool EmotesEnabledForUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsAvatarRulesModel {\n");
            sb.Append("  PlayerAvatarTypes: ").Append(PlayerAvatarTypes).Append("\n");
            sb.Append("  Scales: ").Append(Scales).Append("\n");
            sb.Append("  WearableAssetTypes: ").Append(WearableAssetTypes).Append("\n");
            sb.Append("  AccessoryRefinementTypes: ").Append(AccessoryRefinementTypes).Append("\n");
            sb.Append("  AccessoryRefinementLowerBounds: ").Append(AccessoryRefinementLowerBounds).Append("\n");
            sb.Append("  AccessoryRefinementUpperBounds: ").Append(AccessoryRefinementUpperBounds).Append("\n");
            sb.Append("  BodyColorsPalette: ").Append(BodyColorsPalette).Append("\n");
            sb.Append("  BasicBodyColorsPalette: ").Append(BasicBodyColorsPalette).Append("\n");
            sb.Append("  MinimumDeltaEBodyColorDifference: ").Append(MinimumDeltaEBodyColorDifference).Append("\n");
            sb.Append("  ProportionsAndBodyTypeEnabledForUser: ").Append(ProportionsAndBodyTypeEnabledForUser).Append("\n");
            sb.Append("  DefaultClothingAssetLists: ").Append(DefaultClothingAssetLists).Append("\n");
            sb.Append("  BundlesEnabledForUser: ").Append(BundlesEnabledForUser).Append("\n");
            sb.Append("  EmotesEnabledForUser: ").Append(EmotesEnabledForUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
