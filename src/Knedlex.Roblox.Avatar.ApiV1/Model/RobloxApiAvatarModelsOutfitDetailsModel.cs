/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// A model containing details about a user outfit
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.OutfitDetailsModel")]
    public partial class RobloxApiAvatarModelsOutfitDetailsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsOutfitDetailsModel" /> class.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="universeId">The universe id of the outfit, null when outfit is not created in-experience.</param>
        /// <param name="name">The name.</param>
        /// <param name="assets">A list of assetIds.</param>
        /// <param name="bodyColors">bodyColors.</param>
        /// <param name="scale">scale.</param>
        /// <param name="playerAvatarType">The player avatar type - this can be R6 or R15..</param>
        /// <param name="outfitType">The outfit type of the outfit.</param>
        /// <param name="isEditable">Whether the outfit can be edited by the user.</param>
        /// <param name="moderationStatus">The moderation status of the outfit, not applicable when outfit is created outside experience.</param>
        public RobloxApiAvatarModelsOutfitDetailsModel(long id = default(long), long universeId = default(long), string name = default(string), List<RobloxApiAvatarModelsAssetModelV2> assets = default(List<RobloxApiAvatarModelsAssetModelV2>), RobloxApiAvatarModelsBodyColorsModel bodyColors = default(RobloxApiAvatarModelsBodyColorsModel), RobloxWebResponsesAvatarScaleModel scale = default(RobloxWebResponsesAvatarScaleModel), string playerAvatarType = default(string), string outfitType = default(string), bool isEditable = default(bool), string moderationStatus = default(string))
        {
            this.Id = id;
            this.UniverseId = universeId;
            this.Name = name;
            this.Assets = assets;
            this.BodyColors = bodyColors;
            this.Scale = scale;
            this.PlayerAvatarType = playerAvatarType;
            this.OutfitType = outfitType;
            this.IsEditable = isEditable;
            this.ModerationStatus = moderationStatus;
        }

        /// <summary>
        /// The id
        /// </summary>
        /// <value>The id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// The universe id of the outfit, null when outfit is not created in-experience
        /// </summary>
        /// <value>The universe id of the outfit, null when outfit is not created in-experience</value>
        [DataMember(Name = "universeId", EmitDefaultValue = false)]
        public long UniverseId { get; set; }

        /// <summary>
        /// The name
        /// </summary>
        /// <value>The name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of assetIds
        /// </summary>
        /// <value>A list of assetIds</value>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsAssetModelV2> Assets { get; set; }

        /// <summary>
        /// Gets or Sets BodyColors
        /// </summary>
        [DataMember(Name = "bodyColors", EmitDefaultValue = false)]
        public RobloxApiAvatarModelsBodyColorsModel BodyColors { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public RobloxWebResponsesAvatarScaleModel Scale { get; set; }

        /// <summary>
        /// The player avatar type - this can be R6 or R15.
        /// </summary>
        /// <value>The player avatar type - this can be R6 or R15.</value>
        [DataMember(Name = "playerAvatarType", EmitDefaultValue = false)]
        public string PlayerAvatarType { get; set; }

        /// <summary>
        /// The outfit type of the outfit
        /// </summary>
        /// <value>The outfit type of the outfit</value>
        [DataMember(Name = "outfitType", EmitDefaultValue = false)]
        public string OutfitType { get; set; }

        /// <summary>
        /// Whether the outfit can be edited by the user
        /// </summary>
        /// <value>Whether the outfit can be edited by the user</value>
        [DataMember(Name = "isEditable", EmitDefaultValue = true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// The moderation status of the outfit, not applicable when outfit is created outside experience
        /// </summary>
        /// <value>The moderation status of the outfit, not applicable when outfit is created outside experience</value>
        [DataMember(Name = "moderationStatus", EmitDefaultValue = false)]
        public string ModerationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsOutfitDetailsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UniverseId: ").Append(UniverseId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  BodyColors: ").Append(BodyColors).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  PlayerAvatarType: ").Append(PlayerAvatarType).Append("\n");
            sb.Append("  OutfitType: ").Append(OutfitType).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  ModerationStatus: ").Append(ModerationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
