/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Avatar.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Avatar.ApiV1.Model
{
    /// <summary>
    /// The game start info
    /// </summary>
    [DataContract(Name = "Roblox.Api.Avatar.Models.GameStartInfoResponse")]
    public partial class RobloxApiAvatarModelsGameStartInfoResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxApiAvatarModelsGameStartInfoResponse" /> class.
        /// </summary>
        /// <param name="gameAvatarType">Avatar Type.</param>
        /// <param name="allowCustomAnimations">Custom animation enabled.</param>
        /// <param name="universeAvatarCollisionType">collision type for the univers.</param>
        /// <param name="universeAvatarBodyType">Body type for the univers.</param>
        /// <param name="jointPositioningType">Joing positioning type.</param>
        /// <param name="message">Mesasge.</param>
        /// <param name="universeAvatarMinScales">universeAvatarMinScales.</param>
        /// <param name="universeAvatarMaxScales">universeAvatarMaxScales.</param>
        /// <param name="universeAvatarAssetOverrides">asset overrides for the univers.</param>
        /// <param name="moderationStatus">Moderation status.</param>
        public RobloxApiAvatarModelsGameStartInfoResponse(string gameAvatarType = default(string), string allowCustomAnimations = default(string), string universeAvatarCollisionType = default(string), string universeAvatarBodyType = default(string), string jointPositioningType = default(string), string message = default(string), RobloxWebResponsesAvatarScaleModel universeAvatarMinScales = default(RobloxWebResponsesAvatarScaleModel), RobloxWebResponsesAvatarScaleModel universeAvatarMaxScales = default(RobloxWebResponsesAvatarScaleModel), List<RobloxApiAvatarModelsUniverseAvatarAssetOverrideResponseModel> universeAvatarAssetOverrides = default(List<RobloxApiAvatarModelsUniverseAvatarAssetOverrideResponseModel>), string moderationStatus = default(string))
        {
            this.GameAvatarType = gameAvatarType;
            this.AllowCustomAnimations = allowCustomAnimations;
            this.UniverseAvatarCollisionType = universeAvatarCollisionType;
            this.UniverseAvatarBodyType = universeAvatarBodyType;
            this.JointPositioningType = jointPositioningType;
            this.Message = message;
            this.UniverseAvatarMinScales = universeAvatarMinScales;
            this.UniverseAvatarMaxScales = universeAvatarMaxScales;
            this.UniverseAvatarAssetOverrides = universeAvatarAssetOverrides;
            this.ModerationStatus = moderationStatus;
        }

        /// <summary>
        /// Avatar Type
        /// </summary>
        /// <value>Avatar Type</value>
        [DataMember(Name = "gameAvatarType", EmitDefaultValue = false)]
        public string GameAvatarType { get; set; }

        /// <summary>
        /// Custom animation enabled
        /// </summary>
        /// <value>Custom animation enabled</value>
        [DataMember(Name = "allowCustomAnimations", EmitDefaultValue = false)]
        public string AllowCustomAnimations { get; set; }

        /// <summary>
        /// collision type for the univers
        /// </summary>
        /// <value>collision type for the univers</value>
        [DataMember(Name = "universeAvatarCollisionType", EmitDefaultValue = false)]
        public string UniverseAvatarCollisionType { get; set; }

        /// <summary>
        /// Body type for the univers
        /// </summary>
        /// <value>Body type for the univers</value>
        [DataMember(Name = "universeAvatarBodyType", EmitDefaultValue = false)]
        public string UniverseAvatarBodyType { get; set; }

        /// <summary>
        /// Joing positioning type
        /// </summary>
        /// <value>Joing positioning type</value>
        [DataMember(Name = "jointPositioningType", EmitDefaultValue = false)]
        public string JointPositioningType { get; set; }

        /// <summary>
        /// Mesasge
        /// </summary>
        /// <value>Mesasge</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets UniverseAvatarMinScales
        /// </summary>
        [DataMember(Name = "universeAvatarMinScales", EmitDefaultValue = false)]
        public RobloxWebResponsesAvatarScaleModel UniverseAvatarMinScales { get; set; }

        /// <summary>
        /// Gets or Sets UniverseAvatarMaxScales
        /// </summary>
        [DataMember(Name = "universeAvatarMaxScales", EmitDefaultValue = false)]
        public RobloxWebResponsesAvatarScaleModel UniverseAvatarMaxScales { get; set; }

        /// <summary>
        /// asset overrides for the univers
        /// </summary>
        /// <value>asset overrides for the univers</value>
        [DataMember(Name = "universeAvatarAssetOverrides", EmitDefaultValue = false)]
        public List<RobloxApiAvatarModelsUniverseAvatarAssetOverrideResponseModel> UniverseAvatarAssetOverrides { get; set; }

        /// <summary>
        /// Moderation status
        /// </summary>
        /// <value>Moderation status</value>
        [DataMember(Name = "moderationStatus", EmitDefaultValue = false)]
        public string ModerationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxApiAvatarModelsGameStartInfoResponse {\n");
            sb.Append("  GameAvatarType: ").Append(GameAvatarType).Append("\n");
            sb.Append("  AllowCustomAnimations: ").Append(AllowCustomAnimations).Append("\n");
            sb.Append("  UniverseAvatarCollisionType: ").Append(UniverseAvatarCollisionType).Append("\n");
            sb.Append("  UniverseAvatarBodyType: ").Append(UniverseAvatarBodyType).Append("\n");
            sb.Append("  JointPositioningType: ").Append(JointPositioningType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  UniverseAvatarMinScales: ").Append(UniverseAvatarMinScales).Append("\n");
            sb.Append("  UniverseAvatarMaxScales: ").Append(UniverseAvatarMaxScales).Append("\n");
            sb.Append("  UniverseAvatarAssetOverrides: ").Append(UniverseAvatarAssetOverrides).Append("\n");
            sb.Append("  ModerationStatus: ").Append(ModerationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
