/*
 * Avatar Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Knedlex.Roblox.Avatar.ApiV1.Model;
using Knedlex.Roblox.Avatar.ApiV1.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Knedlex.Roblox.Avatar.ApiV1.Test.Model
{
    /// <summary>
    ///  Class for testing RobloxApiAvatarModelsAvatarRulesModel
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class RobloxApiAvatarModelsAvatarRulesModelTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for RobloxApiAvatarModelsAvatarRulesModel
        //private RobloxApiAvatarModelsAvatarRulesModel instance;

        public RobloxApiAvatarModelsAvatarRulesModelTests()
        {
            // TODO uncomment below to create an instance of RobloxApiAvatarModelsAvatarRulesModel
            //instance = new RobloxApiAvatarModelsAvatarRulesModel();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RobloxApiAvatarModelsAvatarRulesModel
        /// </summary>
        [Fact]
        public void RobloxApiAvatarModelsAvatarRulesModelInstanceTest()
        {
            // TODO uncomment below to test "IsType" RobloxApiAvatarModelsAvatarRulesModel
            //Assert.IsType<RobloxApiAvatarModelsAvatarRulesModel>(instance);
        }

        /// <summary>
        /// Test the property 'PlayerAvatarTypes'
        /// </summary>
        [Fact]
        public void PlayerAvatarTypesTest()
        {
            // TODO unit test for the property 'PlayerAvatarTypes'
        }

        /// <summary>
        /// Test the property 'Scales'
        /// </summary>
        [Fact]
        public void ScalesTest()
        {
            // TODO unit test for the property 'Scales'
        }

        /// <summary>
        /// Test the property 'WearableAssetTypes'
        /// </summary>
        [Fact]
        public void WearableAssetTypesTest()
        {
            // TODO unit test for the property 'WearableAssetTypes'
        }

        /// <summary>
        /// Test the property 'AccessoryRefinementTypes'
        /// </summary>
        [Fact]
        public void AccessoryRefinementTypesTest()
        {
            // TODO unit test for the property 'AccessoryRefinementTypes'
        }

        /// <summary>
        /// Test the property 'AccessoryRefinementLowerBounds'
        /// </summary>
        [Fact]
        public void AccessoryRefinementLowerBoundsTest()
        {
            // TODO unit test for the property 'AccessoryRefinementLowerBounds'
        }

        /// <summary>
        /// Test the property 'AccessoryRefinementUpperBounds'
        /// </summary>
        [Fact]
        public void AccessoryRefinementUpperBoundsTest()
        {
            // TODO unit test for the property 'AccessoryRefinementUpperBounds'
        }

        /// <summary>
        /// Test the property 'BodyColorsPalette'
        /// </summary>
        [Fact]
        public void BodyColorsPaletteTest()
        {
            // TODO unit test for the property 'BodyColorsPalette'
        }

        /// <summary>
        /// Test the property 'BasicBodyColorsPalette'
        /// </summary>
        [Fact]
        public void BasicBodyColorsPaletteTest()
        {
            // TODO unit test for the property 'BasicBodyColorsPalette'
        }

        /// <summary>
        /// Test the property 'MinimumDeltaEBodyColorDifference'
        /// </summary>
        [Fact]
        public void MinimumDeltaEBodyColorDifferenceTest()
        {
            // TODO unit test for the property 'MinimumDeltaEBodyColorDifference'
        }

        /// <summary>
        /// Test the property 'ProportionsAndBodyTypeEnabledForUser'
        /// </summary>
        [Fact]
        public void ProportionsAndBodyTypeEnabledForUserTest()
        {
            // TODO unit test for the property 'ProportionsAndBodyTypeEnabledForUser'
        }

        /// <summary>
        /// Test the property 'DefaultClothingAssetLists'
        /// </summary>
        [Fact]
        public void DefaultClothingAssetListsTest()
        {
            // TODO unit test for the property 'DefaultClothingAssetLists'
        }

        /// <summary>
        /// Test the property 'BundlesEnabledForUser'
        /// </summary>
        [Fact]
        public void BundlesEnabledForUserTest()
        {
            // TODO unit test for the property 'BundlesEnabledForUser'
        }

        /// <summary>
        /// Test the property 'EmotesEnabledForUser'
        /// </summary>
        [Fact]
        public void EmotesEnabledForUserTest()
        {
            // TODO unit test for the property 'EmotesEnabledForUser'
        }
    }
}
